---
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: {{ include "cyberark-sidecar-injector.fullname" . }}
  labels:
    app: {{ include "cyberark-sidecar-injector.name" . }}
    chart: {{ include "cyberark-sidecar-injector.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "cyberark-sidecar-injector.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "cyberark-sidecar-injector.name" . }}
        release: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "cyberark-sidecar-injector.fullname" . }}
{{- if .Values.csrEnabled }}
      initContainers:
        - name: init-webhook
          image: google/cloud-sdk:alpine
          restartPolicy: Never
          command:
            - /bin/sh
            - -c
          args:
            - |
              set -e

              apk add openssl curl
              curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
              chmod +x ./kubectl
              mv ./kubectl /usr/local/bin/kubectl

              secret={{ include "cyberark-sidecar-injector.fullname" . | quote }}
              service={{ include "cyberark-sidecar-injector.fullname" . | quote }}
              namespace={{ .Release.Namespace | quote }}

              csrName=${service}.${namespace}
              tmpdir=$(mktemp -d)
              echo "creating certs in tmpdir ${tmpdir} "

              cat <<EOF >> ${tmpdir}/csr.conf
              [req]
              req_extensions = v3_req
              distinguished_name = req_distinguished_name
              [req_distinguished_name]
              [ v3_req ]
              basicConstraints = CA:FALSE
              keyUsage = nonRepudiation, digitalSignature, keyEncipherment
              extendedKeyUsage = serverAuth
              subjectAltName = @alt_names
              [alt_names]
              DNS.1 = ${service}
              DNS.2 = ${service}.${namespace}
              DNS.3 = ${service}.${namespace}.svc
              EOF

              openssl genrsa -out ${tmpdir}/server-key.pem 2048
              openssl req -new -key ${tmpdir}/server-key.pem -subj "/CN=${service}.${namespace}.svc" -out ${tmpdir}/server.csr -config ${tmpdir}/csr.conf

              # clean-up any previously created CSR for our service. Ignore errors if not present.
              kubectl delete csr ${csrName} --wait=true 2>/dev/null || true

              # create  server cert/key CSR and  send to k8s API
              cat <<EOF | kubectl create -f -
              apiVersion: certificates.k8s.io/v1beta1
              kind: CertificateSigningRequest
              metadata:
                name: ${csrName}
                labels:
                  app: {{ include "cyberark-sidecar-injector.name" . }}
                  chart: {{ include "cyberark-sidecar-injector.chart" . }}
                  release: {{ .Release.Name }}
                  heritage: {{ .Release.Service }}
              spec:
                groups:
                - system:authenticated
                request: $(cat ${tmpdir}/server.csr | base64 | tr -d '\n')
                usages:
                - digital signature
                - key encipherment
                - server auth
              EOF

              # verify CSR has been created
              while true; do
                echo "waiting for CSR to be created..."
                sleep 2
                kubectl get csr ${csrName}
                if [ "$?" -eq 0 ]; then
                    break
                fi
              done
              echo "CSR exists."

              # verify certificate has been signed
              for x in $(seq 100); do
                  echo "waiting for certificate to be signed..."
                  serverCert=$(kubectl get csr ${csrName} -o jsonpath='{.status.certificate}')
                  if [[ "${serverCert}" != '' ]]; then
                      break
                  fi
                  sleep 3
              done
              if [[ "${serverCert}" == '' ]]; then
                  echo "ERROR: After approving csr ${csrName}, the signed certificate did not appear on the resource. Giving up after 100 attempts." >&2
                  exit 1
              fi
              echo ${serverCert} | openssl base64 -d -A -out ${tmpdir}/server-cert.pem

              # create the secret with CA cert and server cert/key
              kubectl create secret generic ${secret} \
                      --from-file=key.pem=${tmpdir}/server-key.pem \
                      --from-file=cert.pem=${tmpdir}/server-cert.pem \
                      --dry-run -o yaml |
                  kubectl -n ${namespace} apply -f -
              echo "sidecar inject certs setup successful."
{{- end }}
      containers:
        - name: cyberark-sidecar-injector
          image: cyberark/sidecar-injector:test
          imagePullPolicy: Always
          args:
            - -tlsCertFile=/etc/webhook/certs/cert.pem
            - -tlsKeyFile=/etc/webhook/certs/key.pem
            - -port=8080
            - -alsologtostderr
            - -v=4
            - 2>&1
          ports:
            - containerPort: 8080
              name: https
          volumeMounts:
            - name: webhook-certs
              mountPath: /etc/webhook/certs
              readOnly: true
      volumes:
        - name: webhook-certs
          secret:
{{- if not .Values.csrEnabled }}
            secretName: {{ required "A valid .Values.certsSecret entry required!" .Values.certsSecret | quote }}
{{- else }}
            secretName: {{ include "cyberark-sidecar-injector.fullname" . }}
{{- end }}
