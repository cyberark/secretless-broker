# This file contains just the correctly configured service configurations to
# allow developers to test the Postgres connector manually. For fixtures used by
# the automated tests, another file, 'secretless.yml' will be generated by the
# test script.
version: 2
services:
  # This is simply so the wait_for_pg script can detect that secretless is running. It
  # doesn't matter that it's for the MySQL connector.
  health-check:
    protocol: ""
    connector: mysql
    listenOn: unix:///sock/mysql.sock
    credentials:
      host:
        from: literal
        get: mysql
      password:
        from: literal
        get: testpass
      username:
        from: literal
        get: testuser
    config: null
  pg-bench:
    protocol: ""
    connector: pg
    listenOn: tcp://0.0.0.0:5432
    credentials:
      host:
        from: literal
        get: health-check
      password:
        from: literal
        get: health-check
      port:
        from: literal
        get: "3306"
      username:
        from: literal
        get: health-check
    config: null
  # The following service is for connecting to the Postgres server that's on the
  # "pg" docker compose service. This can be tested by running `psql -h
  # secretless-dev -p 5555 -U test -d postgres` from the `test` container in the
  # docker compose environment.
  pg:
    protocol: ""
    connector: pg
    listenOn: tcp://0.0.0.0:5555
    credentials:
      host:
        from: literal
        get: pg
      password:
        from: literal
        get: test
      port:
        from: literal
        get: "5432"
      sslcert:
        from: literal
        get: ""
      sslhost:
        from: literal
        get: ""
      sslkey:
        from: literal
        get: ""
      sslmode:
        from: literal
        get: ""
      sslrootcert:
        from: file
        get: /secretless/test/util/ssl/ca.pem
      username:
        from: literal
        get: test
    config: null
  # The following service is for connecting to the MySQL server that's on the
  # "pg_no_tls" docker compose service. This can be tested by running `psql -h
  # secretless-dev -p 6666 -U test -d postgres` from the `test` container in the
  # docker compose environment.
  pg_no_tls:
    protocol: ""
    connector: pg
    listenOn: tcp://0.0.0.0:6666
    credentials:
      host:
        from: literal
        get: pg_no_tls
      password:
        from: literal
        get: test
      port:
        from: literal
        get: "5432"
      sslcert:
        from: literal
        get: ""
      sslhost:
        from: literal
        get: ""
      sslkey:
        from: literal
        get: ""
      sslmode:
        from: literal
        get: "disable"
      sslrootcert:
        from: literal
        get: ""
      username:
        from: literal
        get: test
    config: null