#!/bin/bash -e

local_test=false
while getopts :l opt; do
    case $opt in
        l) local_test=true ;;
       \?) echo "Unknown option -$OPTARG"; exit 1;;
    esac
done

# NOTE: We need an array here so that the elements will be interpreted
# as separate args, even when double quoted.
# Relevant: https://github.com/koalaman/shellcheck/wiki/SC2089
docker_volume_args=()
if $local_test; then
  docker_volume_args=(--volume "$(cd ../../../..; pwd):/secretless")
fi

TEST_FAILED="false"

assert_contains() {
  # assert_contains <string> <substring>
  local string=$1
  local substring=$2

  if [[ "${string}" =~ ${substring} ]]; then
      echo "."
      return
  fi

  echo "FAIL:"
  echo "The string:"
  echo ""
  echo "${string}"
  echo ""
  echo "Did not contain expected substring:"
  echo ""
  echo "${substring}"
  echo ""

  TEST_FAILED="true"
}

ping_target_service_thru_secretless() {
  port=$1

  id="$(openssl rand -hex 6)-basicauth"

  docker_cmd="docker compose run --no-deps --name $id"

  # NOTE: We must use an array here so that we can double quote it when we use
  # it but still have it passed as individual args.  This keeps shellcheck
  # happy and makes our intention clear.
  wget_cmd=(env "http_proxy=http://secretless:$port" \
    wget --quiet --output-document - nginx:8080/)

  # Run command
  $docker_cmd "${docker_volume_args[@]}" test "${wget_cmd[@]}" &> /dev/null || true

  # Capture logs
  logs=$(docker logs --details "$id" 2>&1)

  # Cleanup
  docker rm -f "$id" &> /dev/null

  # Return output for assertion
  echo "$logs"
}

echo "Waiting for Secretless to start"

# NOTE: We're using sh compatible script below because alpine doesn't support
# bash.  We're looking for a better solution.

# single quotes are intentional:
# shellcheck disable=SC2016
docker compose run --rm --no-deps test sh -ec '
counter=0
while ! wget --quiet --output-document - http://secretless:5335/ready > /dev/null 2>&1; do
    if expr $counter = 5 > /dev/null; then
      echo ""
      echo "Timed out waiting for Secretless"
      exit 1
    fi
    let "counter = $counter + 1"
    >&2 printf ". "
    sleep 1
done
'

echo "Secretless is up - continuing "
echo ""
echo "Running tests"
echo ""

echo "Test: Secretless configured with correct password succeeds"

# port 8080 is configured with the correct pw
good_resp=$(ping_target_service_thru_secretless 8080)
assert_contains "$good_resp" "secured resource"

echo "Test: Secretless configured with incorrect password fails"
# port 8081 is configured with the incorrect pw
bad_resp=$(ping_target_service_thru_secretless 8081)
assert_contains "$bad_resp" "401 Unauthorized"

if [[ "$TEST_FAILED" == "true" ]]; then
  echo "FAILED: basicauth/test"
  exit 1
fi

echo "PASS: basicauth/test"
