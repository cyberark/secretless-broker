image: registry.gitlab.com/cyberark/secretless-broker/gitlab-dind:latest
#
# This container image is used for running CI stages.
# It contains all the common utilities; docker, git, docker-compose, openssl etc.
# This image coupled with the docker:stable-dind service makes it possible to
# leverage the Gitlab runner's Docker daemon during CI stages.
#
# This container image can be built by running the following:
#
# echo "
# FROM docker:stable-git
# RUN apk add --no-cache bash openssl py-pip python-dev libffi-dev openssl-dev gcc libc-dev make
# RUN pip install docker-compose
# " | docker build -t registry.gitlab.com/cyberark/secretless-broker/gitlab-dind:latest -
#

variables:
  IMAGE_TAGS: |
    secretless-broker
    secretless-dev
    secretless-broker-quickstart

stages:
  - build
  - test
  - website

build:
  stage: build
  services:
    - docker:stable-dind
  variables:
    DOCKER_DRIVER: overlay2
  script:
    - setup_docker
    - announce "RUNNING build"
    - ./bin/build
    - announce "RUNNING check_style"
    - ./bin/check_style
    - announce "RUNNING test_unit"
    - ./bin/test_unit
    - mv test/junit.xml test/unit-junit.xml
    - announce "RUNNING test_integration"
    - ./bin/test_integration
    - mv test/junit.xml test/integration-junit.xml
    - announce "RUNNING test_demo"
    - ./bin/test_demo
    - announce "RUNNING build_website"
    - ./bin/build_website
    - announce "RUNNING check_website_links"
    - ./bin/check_website_links
  only:
    - branches
  artifacts:
    paths:
      - test/golint.xml
    reports:
      junit:
        - test/unit-junit.xml
        - test/integration-junit.xml

.utils: &utils |
  # variables and functions
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG
  export CI_APPLICATION_TAG=$CI_COMMIT_SHA
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}

  export ALL_TAGS="";
  VERSION=$(cat VERSION);

  ALL_TAGS=$(echo "$IMAGE_TAGS" | sed '/^$/d' | while read -r line; do
    echo "$line:latest"
  done
  )

  function login_ci_registry() {
    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      echo ""
    fi
  }

  function announce() {
    printf "\n\n\n"; echo "<<<<<<<<< $1"; printf "\n\n\n";
  }

  function setup_docker() {
    login_ci_registry
  }

  function save_image() {
    tag=$(echo $1 | sed -e 's/\:/-/' -e 's/\//-/')
    docker tag $1 "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$tag"
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$tag"
  }

  function get_image() {
    tag=$(echo $1 | sed -e 's/\:/-/' -e 's/\//-/')

    docker pull "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$tag"
    docker tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG-$tag" $1
  }

  function save_images() {
    echo "$ALL_TAGS" | while read -r line; do
      save_image "$line";
    done
  }

  function optional_get_images() {
    echo "$ALL_TAGS" | while read -r line; do
      get_image "$line" 2> /dev/null || true;
    done
  }

  function get_images() {
    echo "$ALL_TAGS" | while read -r line; do
      get_image "$line";
    done
  }

  echo "loaded utils"

before_script:
  - *utils
